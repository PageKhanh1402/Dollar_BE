@model IEnumerable<DollarProject.Models.Product>

@{
    ViewData["Title"] = "All Posts";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/admin/assets/css/posts_css.css" />

<div class="d-flex gap-5 align-items-center">
    <!-- Search Form -->
    <div class="search-container" style="margin-bottom: 20px; width: 33%;">
        <form asp-action="AllPost" method="get">
            <div class="input-group">
                <input type="text" name="searchString" class="form-control" placeholder="Search by product name, category, or description" value="@ViewData["CurrentFilter"]" style="height: 40px;" />
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit" style="height: 40px;">Search</button>
                </div>
            </div>
        </form>
    </div>
    <!-- Sold Status Filter -->
    <div class="col-auto" style="width: 33%;">
        <form asp-action="AllPost" method="get">
            <select name="soldStatus" id="soldStatus" class="form-control" onchange="this.form.submit()" style="width: 50%; height: 40px; margin-top: -20px">
                <option value="" selected="@(ViewData["SoldStatus"]?.ToString() == "")">All</option>
                <option value="Sold" selected="@(ViewData["SoldStatus"]?.ToString() == "Sold")">Sold</option>
                <option value="Selling" selected="@(ViewData["SoldStatus"]?.ToString() == "Selling")">Selling</option>
            </select>
        </form>
    </div>
</div>


<div class="grid-container">
    @foreach (var item in Model)
    {
        <div class="product-card">
            @if (item.ImageURL == null)
            {
                <img src="~/admin/uploads/default.jpg" alt="@item.ProductName" class="product-image" />
            }
            else
            {
                <img src="~/images/@item.ImageURL" alt="@item.ProductName" class="product-image" />
            }
            <div class="product-body">
                <h5 class="product-title">@Html.DisplayFor(modelItem => item.ProductName)</h5>
                <p class="product-info"><strong>Category:</strong> @Html.DisplayFor(modelItem => item.Category.CategoryName)</p>
                <p class="product-info">
                    <strong>Description:</strong>
                    @(item.Description?.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)
                </p>
                <p class="product-info"><strong>Information:</strong> @Html.DisplayFor(modelItem => item.AccountInfomation)</p>
                <p class="product-info"><strong>Type:</strong> @Html.DisplayFor(modelItem => item.ProductType)</p>
                <p class="product-info"><strong>Stock:</strong> @Html.DisplayFor(modelItem => item.Stock)</p>
                <p class="product-info"><strong>Price:</strong> @Html.DisplayFor(modelItem => item.PriceXu) Xu</p>
                <p class="product-info">
                    <strong>Status:</strong>
                    <span class="@(item.IsApproved ? "approved" : "not-approved")">
                        @(item.IsApproved ? "Approved" : "Not Approved")
                    </span>,
                    <span class="@(item.IsSold ? "approved" : "not-approved")">
                        @(item.IsSold ? "Sold" : "Selling")
                    </span>
                </p>
                
                <p class="product-info"><strong>Created:</strong> @Html.DisplayFor(modelItem => item.CreatedAt)</p>
                <p class="product-info"><strong>Posted by:</strong> @Html.DisplayFor(modelItem => item.User.UserID) - @(item.User.FirstName + ' ' + item.User.LastName) </p>
                @if (item.ApprovedByUser != null)
                {
                    <p class="product-info"><strong>Approved by:</strong> @Html.DisplayFor(modelItem => item.ApprovedByUser.UserID) - @(item.ApprovedByUser.FirstName + ' ' + item.ApprovedByUser.LastName)</p>
                }
            </div>
            <div class="product-actions">
                <button class="btn btn-danger btn-custom delete-btn" data-id="@item.ProductID">Delete</button>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {
            // Handle delete button click with SweetAlert2 confirmation
            $('.delete-btn').on('click', function () {
                var productId = $(this).data('id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send AJAX POST request to DeleteConfirmed action
                        $.ajax({
                            url: '@Url.Action("Delete", "Posts", new { area = "Admin" })',
                            type: 'POST',
                            data: { id: productId },
                            success: function () {
                                // Show success toast and reload the page
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Product deleted successfully.',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                }).then(() => {
                                    // Reload the page to refresh the product list
                                    window.location.reload();
                                });
                            },
                            error: function (xhr) {
                                // Show error toast
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Error deleting product.',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                });
                            }
                        });
                    }
                });
            });

            // Display toast for TempData messages (in case of redirect)
        @if (TempData["success"] != null)
        {
            <text>
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: '@TempData["success"]',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            </text>
        }
        @if (TempData["error"] != null)
        {
            <text>
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: '@TempData["error"]',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
            </text>
        }
        });
    </script>
}