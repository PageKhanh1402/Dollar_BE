// <auto-generated />
using System;
using DollarProject.DbConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DollarProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DollarProject.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID", "ProductID")
                        .IsUnique();

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartID = 1,
                            AddedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9751),
                            ProductID = 2,
                            Quantity = 0,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("DollarProject.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ConversationID");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            ConversationID = 1,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9908),
                            LastMessageAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9910),
                            Title = "Customer Support Conversation"
                        },
                        new
                        {
                            ConversationID = 2,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9912),
                            LastMessageAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9912),
                            Title = "Seller to Customer Inquiry"
                        });
                });

            modelBuilder.Entity("DollarProject.Models.ConversationParticipant", b =>
                {
                    b.Property<int>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantID"));

                    b.Property<int>("ConversationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ParticipantID");

                    b.HasIndex("ConversationID");

                    b.HasIndex("UserID");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("DollarProject.Models.CurrencyConversionRate", b =>
                {
                    b.Property<int>("RateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateID"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("SetByUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("VNDtoXuRate")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("RateID");

                    b.HasIndex("SetByUserID");

                    b.ToTable("CurrencyConversionRates");

                    b.HasData(
                        new
                        {
                            RateID = 1,
                            EffectiveFrom = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9628),
                            SetByUserID = 1,
                            VNDtoXuRate = 1000m
                        });
                });

            modelBuilder.Entity("DollarProject.Models.Follower", b =>
                {
                    b.Property<int>("FollowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowID"));

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FollowerID")
                        .HasColumnType("int");

                    b.Property<int>("SellerID")
                        .HasColumnType("int");

                    b.HasKey("FollowID");

                    b.HasIndex("SellerID");

                    b.HasIndex("FollowerID", "SellerID")
                        .IsUnique();

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("DollarProject.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<int>("ConversationID")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.HasIndex("ConversationID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DollarProject.Models.MessageReadStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StatusID");

                    b.HasIndex("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageReadStatuses");
                });

            modelBuilder.Entity("DollarProject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedEntityID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationID = 1,
                            Content = "Your order has been received!",
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9885),
                            IsRead = false,
                            RelatedEntityType = "Order",
                            UserID = 3
                        },
                        new
                        {
                            NotificationID = 2,
                            Content = "A new product has been approved.",
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9888),
                            IsRead = false,
                            RelatedEntityType = "Product",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("DollarProject.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeliveryNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPaidWithWallet")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefundStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SellerID")
                        .HasColumnType("int");

                    b.Property<int>("TotalPriceXu")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("SellerID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            DeliveryMethod = "Automatic",
                            DeliveryNotes = "Leave at the front door",
                            DeliveryStatus = "Pending",
                            IsPaidWithWallet = false,
                            OrderDate = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9783),
                            OrderStatus = "Pending",
                            SellerID = 3,
                            TotalPriceXu = 100,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 2,
                            DeliveryMethod = "Automatic",
                            DeliveryNotes = "Deliver after 5 PM",
                            DeliveryStatus = "Pending",
                            IsPaidWithWallet = false,
                            OrderDate = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9786),
                            OrderStatus = "Pending",
                            SellerID = 3,
                            TotalPriceXu = 50,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("DollarProject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPriceXu")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailID = 1,
                            OrderID = 1,
                            ProductID = 1,
                            Quantity = 1,
                            UnitPriceXu = 100
                        },
                        new
                        {
                            OrderDetailID = 2,
                            OrderID = 2,
                            ProductID = 2,
                            Quantity = 1,
                            UnitPriceXu = 50
                        });
                });

            modelBuilder.Entity("DollarProject.Models.OrderDispute", b =>
                {
                    b.Property<int>("DisputeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisputeID"));

                    b.Property<int?>("AssignedToStaffID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisputeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Evidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ReportedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DisputeID");

                    b.HasIndex("AssignedToStaffID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ReportedByUserID");

                    b.ToTable("OrderDisputes");
                });

            modelBuilder.Entity("DollarProject.Models.OrderStatusHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChangedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PreviousStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HistoryID");

                    b.HasIndex("ChangedByUserID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderStatusHistories");

                    b.HasData(
                        new
                        {
                            HistoryID = 1,
                            ChangedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9867),
                            ChangedByUserID = 1,
                            NewStatus = "Pending",
                            OrderID = 1
                        });
                });

            modelBuilder.Entity("DollarProject.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<int>("AmountXu")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            AmountXu = 150,
                            OrderID = 1,
                            PaymentDate = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9839),
                            PaymentMethod = "VNPay",
                            PaymentStatus = "Processing"
                        },
                        new
                        {
                            PaymentID = 2,
                            AmountXu = 50,
                            OrderID = 2,
                            PaymentDate = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9843),
                            PaymentMethod = "Wallet",
                            PaymentStatus = "Processing"
                        });
                });

            modelBuilder.Entity("DollarProject.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("AccountInfomation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovedByUserID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("PriceXu")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("ApprovedByUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            AccountInfomation = "product1@gmail.com + Pass: 123456",
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9702),
                            Description = "Full MMORPG account.",
                            ImageURL = "marketplace5.png",
                            IsApproved = true,
                            PriceXu = 100,
                            ProductName = "Valorant Account",
                            ProductType = "GameAccount",
                            Stock = 0,
                            UserID = 1
                        },
                        new
                        {
                            ProductID = 2,
                            AccountInfomation = "product2@gmail.com + Pass: 123456",
                            CategoryID = 9,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9705),
                            Description = "In-game weapon for RPG.",
                            ImageURL = "marketplace6.png",
                            IsApproved = true,
                            PriceXu = 50,
                            ProductName = "Mastering Mindset",
                            ProductType = "GameItem",
                            Stock = 0,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("DollarProject.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Game Accounts",
                            Description = "Full game accounts"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "In-Game Items",
                            Description = "Virtual items for games"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Game Currency",
                            Description = "In-game money and tokens"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Game Keys/Codes",
                            Description = "Digital game keys and activation codes"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "MMORPG Accounts",
                            Description = "Accounts for MMORPGs",
                            ParentCategoryID = 1
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "MOBA Accounts",
                            Description = "Accounts for MOBAs",
                            ParentCategoryID = 1
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "FPS Accounts",
                            Description = "Accounts for FPS games",
                            ParentCategoryID = 1
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Mobile Game Accounts",
                            Description = "Accounts for mobile games",
                            ParentCategoryID = 1
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryName = "Weapons",
                            Description = "In-game weapons",
                            ParentCategoryID = 2
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryName = "Armor",
                            Description = "In-game armor",
                            ParentCategoryID = 2
                        },
                        new
                        {
                            CategoryID = 11,
                            CategoryName = "Skins",
                            Description = "Character and weapon skins",
                            ParentCategoryID = 2
                        },
                        new
                        {
                            CategoryID = 12,
                            CategoryName = "Mounts",
                            Description = "In-game mounts and vehicles",
                            ParentCategoryID = 2
                        });
                });

            modelBuilder.Entity("DollarProject.Models.ProductDeliveryDetail", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryFailReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GameServer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderDetailID")
                        .HasColumnType("int");

                    b.HasKey("DeliveryID");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("ProductDeliveryDetails");
                });

            modelBuilder.Entity("DollarProject.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SellerServiceRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DollarProject.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("DollarProject.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerifiedSeller")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SellerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellerRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9496),
                            Email = "admin@gamemarketplace.com",
                            FirstName = "Admin",
                            IsVerifiedSeller = true,
                            LastName = "User",
                            Password = "Admin@123",
                            RoleID = 1,
                            SellerRating = 0m,
                            Username = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9499),
                            Email = "staff@gamemarketplace.com",
                            FirstName = "Staff",
                            IsVerifiedSeller = true,
                            LastName = "User",
                            Password = "Staff@123",
                            RoleID = 2,
                            SellerRating = 0m,
                            Username = "staff"
                        },
                        new
                        {
                            UserID = 3,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9530),
                            Email = "customer@gamemarketplace.com",
                            FirstName = "Customer",
                            IsVerifiedSeller = true,
                            LastName = "User",
                            Password = "Customer@123",
                            RoleID = 3,
                            SellerRating = 0m,
                            Username = "customer"
                        });
                });

            modelBuilder.Entity("DollarProject.Models.UserActivityLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("ActivityDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("DollarProject.Models.Wallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletID"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("XuBalance")
                        .HasColumnType("int");

                    b.HasKey("WalletID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            WalletID = 1,
                            LastUpdated = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9651),
                            UserID = 1,
                            XuBalance = 1000
                        },
                        new
                        {
                            WalletID = 2,
                            LastUpdated = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9652),
                            UserID = 2,
                            XuBalance = 500
                        },
                        new
                        {
                            WalletID = 3,
                            LastUpdated = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9654),
                            UserID = 3,
                            XuBalance = 100
                        });
                });

            modelBuilder.Entity("DollarProject.Models.WalletTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("AmountVND")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("AmountXu")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("WalletID");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("DollarProject.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("WishlistID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID", "ProductID")
                        .IsUnique();

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            WishlistID = 1,
                            CreatedAt = new DateTime(2025, 5, 23, 10, 22, 6, 537, DateTimeKind.Local).AddTicks(9730),
                            ProductID = 1,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("DollarProject.Models.WithdrawRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("AmountVND")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("AmountXu")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("UserID");

                    b.ToTable("WithdrawRequests");
                });

            modelBuilder.Entity("DollarProject.Models.Cart", b =>
                {
                    b.HasOne("DollarProject.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.ConversationParticipant", b =>
                {
                    b.HasOne("DollarProject.Models.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.CurrencyConversionRate", b =>
                {
                    b.HasOne("DollarProject.Models.User", "SetByUser")
                        .WithMany("SetRates")
                        .HasForeignKey("SetByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SetByUser");
                });

            modelBuilder.Entity("DollarProject.Models.Follower", b =>
                {
                    b.HasOne("DollarProject.Models.User", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "SellerUser")
                        .WithMany("Followers")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowerUser");

                    b.Navigation("SellerUser");
                });

            modelBuilder.Entity("DollarProject.Models.Message", b =>
                {
                    b.HasOne("DollarProject.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DollarProject.Models.MessageReadStatus", b =>
                {
                    b.HasOne("DollarProject.Models.Message", "Message")
                        .WithMany("ReadStatuses")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.Notification", b =>
                {
                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.Order", b =>
                {
                    b.HasOne("DollarProject.Models.User", "Seller")
                        .WithMany("SellerOrders")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "Buyer")
                        .WithMany("BuyerOrders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DollarProject.Models.OrderDetail", b =>
                {
                    b.HasOne("DollarProject.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DollarProject.Models.OrderDispute", b =>
                {
                    b.HasOne("DollarProject.Models.User", "AssignedToStaff")
                        .WithMany("AssignedDisputes")
                        .HasForeignKey("AssignedToStaffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DollarProject.Models.Order", "Order")
                        .WithMany("Disputes")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "ReportedByUser")
                        .WithMany("ReportedDisputes")
                        .HasForeignKey("ReportedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToStaff");

                    b.Navigation("Order");

                    b.Navigation("ReportedByUser");
                });

            modelBuilder.Entity("DollarProject.Models.OrderStatusHistory", b =>
                {
                    b.HasOne("DollarProject.Models.User", "ChangedByUser")
                        .WithMany("StatusChanges")
                        .HasForeignKey("ChangedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.Order", "Order")
                        .WithMany("StatusHistories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DollarProject.Models.Payment", b =>
                {
                    b.HasOne("DollarProject.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DollarProject.Models.Product", b =>
                {
                    b.HasOne("DollarProject.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DollarProject.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.ProductCategory", b =>
                {
                    b.HasOne("DollarProject.Models.ProductCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DollarProject.Models.ProductDeliveryDetail", b =>
                {
                    b.HasOne("DollarProject.Models.OrderDetail", "OrderDetail")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("DollarProject.Models.Review", b =>
                {
                    b.HasOne("DollarProject.Models.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.User", b =>
                {
                    b.HasOne("DollarProject.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DollarProject.Models.UserActivityLog", b =>
                {
                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.Wallet", b =>
                {
                    b.HasOne("DollarProject.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("DollarProject.Models.Wallet", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.WalletTransaction", b =>
                {
                    b.HasOne("DollarProject.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DollarProject.Models.Wishlist", b =>
                {
                    b.HasOne("DollarProject.Models.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.WithdrawRequest", b =>
                {
                    b.HasOne("DollarProject.Models.User", "User")
                        .WithMany("WithdrawRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DollarProject.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DollarProject.Models.Message", b =>
                {
                    b.Navigation("ReadStatuses");
                });

            modelBuilder.Entity("DollarProject.Models.Order", b =>
                {
                    b.Navigation("Disputes");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("StatusHistories");
                });

            modelBuilder.Entity("DollarProject.Models.OrderDetail", b =>
                {
                    b.Navigation("DeliveryDetails");
                });

            modelBuilder.Entity("DollarProject.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("DollarProject.Models.ProductCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DollarProject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DollarProject.Models.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("AssignedDisputes");

                    b.Navigation("BuyerOrders");

                    b.Navigation("CartItems");

                    b.Navigation("ConversationParticipants");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Notifications");

                    b.Navigation("Products");

                    b.Navigation("ReportedDisputes");

                    b.Navigation("Reviews");

                    b.Navigation("SellerOrders");

                    b.Navigation("SentMessages");

                    b.Navigation("SetRates");

                    b.Navigation("StatusChanges");

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("Wishlists");

                    b.Navigation("WithdrawRequests");
                });

            modelBuilder.Entity("DollarProject.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
