@model DollarProject.Models.User
@using System.Security.Claims
@using DollarProject.ViewModels
@{
    var currentUserId = int.Parse(User.FindFirstValue("UserId") ?? "0");
    var isAdmin = User.IsInRole("Admin") || User.IsInRole("Staff");
    var filter = Context.Request.Query["filter"].ToString();
}
<!-- user profile section start -->
<section class="section-pt overflow-visible">
    <div class="container">
        <!-- COVER + AVATAR -->
        <div class="relative">
            <div class="glitch-effect">
                <div class="glitch-thumb">
                    <img class="w-full xl:h-[490px] h-[400px] hover:scale-110 object-cover"
                         src="~/images/@(Model?.ImageURL ?? "avatar3.png")" alt="cover image">
                </div>
                <div class="glitch-thumb">
                    <img class="w-full xl:h-[490px] lg:h-[400px] md:h-[340px] sm:h-[300px] h-[240px] hover:scale-110 object-cover"
                         src="~/images/@(Model?.ImageURL ?? "avatar3.png")" alt="cover image">
                </div>
            </div>

            <!-- Avatar and Name -->
            <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-center bg-black bg-opacity-50 px-6 py-4 rounded-xl">
                <img class="rounded-full w-24 h-24 mx-auto border-4 border-white shadow"
                     src="~/images/@(Model.ImageURL ?? "avatar3.png")" alt="avatar">
                <h2 class="text-white text-2xl font-bold mt-2">
                    @(Model?.FirstName ?? "") @(Model?.LastName ?? "")
                </h2>
                <p class="text-white text-sm mt-1 italic">
                    @(Model?.SellerDescription ?? "I'm a proud member of TradeMax Arena – Dedicated & Reliable.")
                </p>
            </div>
        </div>

        <!-- Main profile info -->
        <div class="grid grid-cols-12 gap-30p bg-b-neutral-3 rounded-12 pb-30p">
            <div class="4xl:col-start-2 4xl:col-end-12 col-span-12 max-4xl:px-48p">
                <div class="relative flex 3xl:items-end max-3xl:items-center 3xl:justify-between max-3xl:flex-col gap-30p mt-4 4xl:mb-[70px] mb-60p">
                    <!-- Followers - Following - Products -->
                    <div class="3xl:order-1 order-2 flex text-center divide-x divide-shap">
                        <div class="px-24p">
                            <h2 class="heading-40 text-w-neutral-1 mb-1">@(Model?.Products?.Count(p => p.IsSold) ?? 0)</h2>
                            <span class="text-m-medium text-w-neutral-4/70">Sold</span>
                        </div>
                        <div class="pl-6">
                            <h2 class="heading-40 text-w-neutral-1 mb-1">@(Model?.Products?.Count ?? 0)</h2>
                            <span class="text-m-medium text-w-neutral-4/70">Products</span>
                        </div>
                    </div>

                    <!-- Social Icons -->
                    <div class="order-3 flex items-center gap-3">
                        <a href="#" class="btn-socal-primary"><i class="ti ti-brand-facebook"></i></a>
                        <a href="#" class="btn-socal-primary"><i class="ti ti-brand-twitch"></i></a>
                        <a href="#" class="btn-socal-primary"><i class="ti ti-brand-instagram"></i></a>
                        <a href="#" class="btn-socal-primary"><i class="ti ti-brand-discord"></i></a>
                        <a href="#" class="btn-socal-primary"><i class="ti ti-brand-youtube"></i></a>
                    </div>

                    <!-- Seller action -->
                    <div class="order-4 3xl:absolute 3xl:right-0 3xl:-top-25 flex items-center justify-center flex-wrap gap-20p z-[3]">
                        @if (Model?.IsVerifiedSeller == true)
                        {
                            <a id="openPostModal"
                               class="text-base md:text-lg
                                  bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500
                                  hover:from-yellow-500 hover:to-red-600
                                  text-black font-bold px-6 py-3 rounded-full shadow-xl
                                  transition-all duration-300 transform hover:scale-105 tracking-wide">
                                🎮 Sell +
                            </a>
                            <a href="#product-list" class="text-base md:text-lg
                                  bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500
                                  hover:from-yellow-500 hover:to-red-600
                                  text-black font-bold px-6 py-3 rounded-full shadow-xl
                                  transition-all duration-300 transform hover:scale-105 tracking-wide">All Products</a>
                        }
                        else
                        {
                            <a id="openRegisterModal"
                               class="text-base md:text-lg
                                bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500
                                hover:from-yellow-500 hover:to-red-600
                                text-black font-bold px-6 py-3 rounded-full shadow-xl
                                transition-all duration-300 transform hover:scale-105 tracking-wide">
                                🚀 Register to Sell
                            </a>

                        }
                    </div>

                    <!-- Modal Register Seller Wrapper -->
                    @await Html.PartialAsync("~/Views/Seller/_RegisterSellerPartial.cshtml", Model.UserID)


                    <!-- Modal post product wrapper -->
                    <div id="postProductModal" class="fixed inset-0 bg-black bg-opacity-60 z-50 hidden items-start justify-center overflow-y-auto pt-20">
                        <div class="bg-gray-900 p-6 sm:p-8 rounded-2xl w-full max-w-4xl relative">
                            <button id="closePostModal" class="absolute top-2 right-3 text-white text-xl">×</button>
                            @await Html.PartialAsync(
                                     "~/Views/Product/_CreateProductPartial.cshtml",
                                     new ProductFormViewModel
                            {
                                Product = new Product(),
                                Categories = ViewBag.Categories as List<ProductCategory> ?? new()
                            })
                        </div>
                    </div>

                    <!-- Settings Dropdown -->
                    <div x-data="dropdown" class="absolute top-0 right-0 z-[10] dropdown">
                        <button @@click="toggle()" class="relative btn-c btn-c-xxl btn-neutral-2 text-w-neutral-4">
                            <i class="ti ti-dots"></i>
                        </button>
                        <div x-show="isOpen" @@click.away="close()" class="dropdown-content sm:right-0 max-sm:left-0 sm:top-18 top-15 z-20">
                            <a asp-controller="Profile" asp-action="Edit" class="dropdown-item">Settings</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Filter Menu Start -->
<div class="flex justify-end px-4 mt-6 mb-8 relative z-40">
    <div id="filterWrapper" class="relative inline-block text-left">
        <button id="filterToggle" type="button"
                class="inline-flex items-center justify-between rounded-lg border border-yellow-400 bg-neutral-900 px-4 py-2 text-sm font-semibold text-white hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-yellow-400">
            <span id="currentFilterText">Filter: All Products</span>
            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M19 9l-7 7-7-7" />
            </svg>
        </button>

        <div id="filterMenu"
             class="hidden absolute right-0 mt-2 w-44 rounded-md bg-[#1c1c1c] border border-yellow-500 shadow-2xl ring-1 ring-black ring-opacity-20 z-50">
            <div class="py-1 divide-y divide-gray-700">
                <a href="#" data-filter="" class="block px-4 py-2 text-sm text-white hover:bg-yellow-400 hover:text-black">All Products</a>
                <a href="#" data-filter="sold" class="block px-4 py-2 text-sm text-white hover:bg-yellow-400 hover:text-black">Sold</a>
                <a href="#" data-filter="pending" class="block px-4 py-2 text-sm text-white hover:bg-yellow-400 hover:text-black">Pending</a>
                <a href="#" data-filter="approved" class="block px-4 py-2 text-sm text-white hover:bg-yellow-400 hover:text-black">Approved</a>
                <a href="#" data-filter="rejected" class="block px-4 py-2 text-sm text-white hover:bg-yellow-400 hover:text-black">Rejected</a>
            </div>
        </div>
    </div>
</div>

<!-- Product List -->
<div id="product-list-container">
    @await Html.PartialAsync("~/Views/Product/_ProductListPartial.cshtml", Model.Products.ToList())
</div>

<!-- Modal Wrapper -->
<div id="editProductModal" class="fixed inset-0 bg-black bg-opacity-60 z-50 hidden items-start justify-center overflow-y-auto pt-20">
    <div class="bg-gray-900 p-6 sm:p-8 rounded-2xl w-full max-w-4xl relative">
        <button onclick="closeEditModal()" class="absolute top-2 right-3 text-white text-xl">×</button>
        <div id="editProductContent"></div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        //filter
        const filterToggle = document.getElementById("filterToggle");
        const filterMenu = document.getElementById("filterMenu");
        const currentFilterText = document.getElementById("currentFilterText");

        filterToggle.addEventListener("click", () => {
            filterMenu.classList.toggle("hidden");
        });

        filterMenu.querySelectorAll("a").forEach(item => {
            item.addEventListener("click", function (e) {
                e.preventDefault();
                const selectedFilter = this.getAttribute("data-filter");
                const selectedText = this.textContent.trim();
                currentFilterText.textContent = `Filter: ${selectedText}`;
                filterMenu.classList.add("hidden");

                fetch(`/Profile/FilterProducts?filter=${selectedFilter}`)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById("product-list-container").innerHTML = html;
                    });
            });
        });
        //open create modal
        const modal = document.getElementById("postProductModal");
        const openBtn = document.getElementById("openPostModal");
        const closeBtn = document.getElementById("closePostModal");

        openBtn?.addEventListener("click", () => {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
        });

        closeBtn?.addEventListener("click", () => {
            modal.classList.add("hidden");
        });

        window.addEventListener("click", (e) => {
            if (e.target === modal) {
                modal.classList.add("hidden");
            }
        });
        //open edit modal
        function openEditModal(productId) {
            fetch(`/Product/EditModal/${productId}`)
                .then(res => res.text())
                .then(html => {
                    document.getElementById("editProductContent").innerHTML = html;
                    document.getElementById("editProductModal").classList.remove("hidden");
                    document.getElementById("editProductModal").classList.add("flex");
                });
        }

        function closeEditModal() {
            document.getElementById("editProductModal").classList.add("hidden");
        }

        // Modal Register Seller
        window.addEventListener("DOMContentLoaded", () => {
            const registerModal = document.getElementById("registerSellerModal");
            const openRegisterBtn = document.getElementById("openRegisterModal");
            const closeRegisterBtn = document.getElementById("closeRegisterSellerModal");

            openRegisterBtn?.addEventListener("click", () => {
                registerModal.classList.remove("hidden");
                registerModal.classList.add("flex");
            });

            closeRegisterBtn?.addEventListener("click", () => {
                registerModal.classList.add("hidden");
            });

            window.addEventListener("click", (e) => {
                if (e.target === registerModal) {
                    registerModal.classList.add("hidden");
                }
            });
        });

        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: '@TempData["SuccessMessage"]',
                    confirmButtonText: 'OK',
                    customClass: {
                        confirmButton: 'bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700'
                    },
                    buttonsStyling: false
                });
            </text>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                Swal.fire({
                    icon: 'error',
                    title: 'Oops!',
                    text: '@TempData["ErrorMessage"]',
                    confirmButtonColor: '#d33'
                });
            </text>
        }
    </script>
}